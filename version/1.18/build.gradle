import groovy.json.JsonGenerator
import groovy.json.JsonSlurper

plugins {
    id "maven-publish"
    id "fabric-loom" version "0.11.+"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

def versionEnv = System.getenv("MOD_VERSION")
if (versionEnv == null || versionEnv.isBlank()) {
    versionEnv = "SNAPSHOT"
}

version = versionEnv

group = "lol.bai.megane"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

def meganeModule(module) {
    return "lol.bai.megane:megane-" + module
}

repositories {
    maven { url "https://maven.fabricmc.net/" }
    maven { url "https://maven.bai.lol" }
    maven {
        url "https://www.cursemaven.com"
        content { includeGroup "curse.maven" }
    }
    ivy {
        url file("localdeps")
        metadataSources.artifact()
        patternLayout { artifact "[module]-[revision].[ext]" }
        content { includeGroup "localdeps" }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:1.18.2"
    mappings "net.fabricmc:yarn:1.18.2+build.1:v2"
    modImplementation "net.fabricmc:fabric-loader:0.13.3"
}

if (file("dependencies.gradle").exists()) {
    apply from: "dependencies.gradle"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    doLast {
        def json = new JsonGenerator.Options()
            .disableUnicodeEscaping()
            .build()
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
            it.setText(json.toJson(new JsonSlurper().parse(it, "UTF-8")), "UTF-8")
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.release.set(17)
}

java {
    withSourcesJar()
}

jar {
    from(rootProject.file("includes"))
}

publishing {
    repositories {
        maven {
            url = uri("https://gitlab.com/api/v4/projects/25106863/packages/maven")
            name = "GitLab"

            credentials(HttpHeaderCredentials) {
                name = "Private-Token"
                value = System.getenv("GITLAB_TOKEN")
            }

            authentication {
                header HttpHeaderAuthentication
            }
        }
    }

    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

if (file("extra.gradle").exists()) {
    apply from: "extra.gradle"
}
